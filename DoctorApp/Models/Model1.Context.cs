//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoctorApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DoctorClinicEntities : DbContext
    {
        public DoctorClinicEntities()
            : base("name=DoctorClinicEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EducationInformation> EducationInformations { get; set; }
        public virtual DbSet<ExperienceInformation> ExperienceInformations { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<Leave_> Leave_ { get; set; }
    
        public virtual ObjectResult<BrowseDoctor_sp_Result> BrowseDoctor_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDoctor_sp_Result>("BrowseDoctor_sp");
        }
    
        public virtual ObjectResult<BrowseDoctorBy_sp_Result> BrowseDoctorBy_sp(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDoctorBy_sp_Result>("BrowseDoctorBy_sp", doctorIDParameter);
        }
    
        public virtual ObjectResult<BrowseDoctorByID_sp_Result> BrowseDoctorByID_sp(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDoctorByID_sp_Result>("BrowseDoctorByID_sp", doctorIDParameter);
        }
    
        public virtual ObjectResult<BrowseDoctorEdID_sp_Result> BrowseDoctorEdID_sp(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDoctorEdID_sp_Result>("BrowseDoctorEdID_sp", doctorIDParameter);
        }
    
        public virtual int DeleteDoctor_sp(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctor_sp", doctorIDParameter);
        }
    
        public virtual int DeleteEducationInformation_sp(Nullable<int> educationID)
        {
            var educationIDParameter = educationID.HasValue ?
                new ObjectParameter("EducationID", educationID) :
                new ObjectParameter("EducationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEducationInformation_sp", educationIDParameter);
        }
    
        public virtual int DeleteExperienceInformation_sp(Nullable<int> experienceID)
        {
            var experienceIDParameter = experienceID.HasValue ?
                new ObjectParameter("ExperienceID", experienceID) :
                new ObjectParameter("ExperienceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExperienceInformation_sp", experienceIDParameter);
        }
    
        public virtual int insertDoctor_sp(string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string gender, string address, string country, string city, string province, string phone, string postalCode, string description, string image, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertDoctor_sp", firstNameParameter, lastNameParameter, emailParameter, dOBParameter, genderParameter, addressParameter, countryParameter, cityParameter, provinceParameter, phoneParameter, postalCodeParameter, descriptionParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int insertEducationInformation_sp(Nullable<int> doctorID, string institutionName, string degree, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> completeDate)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var completeDateParameter = completeDate.HasValue ?
                new ObjectParameter("CompleteDate", completeDate) :
                new ObjectParameter("CompleteDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEducationInformation_sp", doctorIDParameter, institutionNameParameter, degreeParameter, startingDateParameter, completeDateParameter);
        }
    
        public virtual int insertExperienceInformation_sp(Nullable<int> doctorID, string companyName, string position, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("PeriodFrom", periodFrom) :
                new ObjectParameter("PeriodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("PeriodTo", periodTo) :
                new ObjectParameter("PeriodTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertExperienceInformation_sp", doctorIDParameter, companyNameParameter, positionParameter, periodFromParameter, periodToParameter);
        }
    
        public virtual ObjectResult<Login_sp_Result> Login_sp(string uEmail, string uPass)
        {
            var uEmailParameter = uEmail != null ?
                new ObjectParameter("UEmail", uEmail) :
                new ObjectParameter("UEmail", typeof(string));
    
            var uPassParameter = uPass != null ?
                new ObjectParameter("UPass", uPass) :
                new ObjectParameter("UPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_sp_Result>("Login_sp", uEmailParameter, uPassParameter);
        }
    
        public virtual int UpdateDoctor_sp(Nullable<int> doctorID, Nullable<int> educationID, Nullable<int> experienceID, string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string gender, string address, string country, string city, string province, string phone, string postalCode, string description, string image, string modifyBy, Nullable<System.DateTime> modifyDate, string status)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var educationIDParameter = educationID.HasValue ?
                new ObjectParameter("EducationID", educationID) :
                new ObjectParameter("EducationID", typeof(int));
    
            var experienceIDParameter = experienceID.HasValue ?
                new ObjectParameter("ExperienceID", experienceID) :
                new ObjectParameter("ExperienceID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor_sp", doctorIDParameter, educationIDParameter, experienceIDParameter, firstNameParameter, lastNameParameter, emailParameter, dOBParameter, genderParameter, addressParameter, countryParameter, cityParameter, provinceParameter, phoneParameter, postalCodeParameter, descriptionParameter, imageParameter, modifyByParameter, modifyDateParameter, statusParameter);
        }
    
        public virtual int UpdateEducationInformation_sp(Nullable<int> doctorID, string institutionName, string degree, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> completeDate, Nullable<int> educationID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var completeDateParameter = completeDate.HasValue ?
                new ObjectParameter("CompleteDate", completeDate) :
                new ObjectParameter("CompleteDate", typeof(System.DateTime));
    
            var educationIDParameter = educationID.HasValue ?
                new ObjectParameter("EducationID", educationID) :
                new ObjectParameter("EducationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEducationInformation_sp", doctorIDParameter, institutionNameParameter, degreeParameter, startingDateParameter, completeDateParameter, educationIDParameter);
        }
    
        public virtual int UpdateExperienceInformation_sp(Nullable<int> doctorID, string companyName, string position, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, Nullable<int> experienceID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("PeriodFrom", periodFrom) :
                new ObjectParameter("PeriodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("PeriodTo", periodTo) :
                new ObjectParameter("PeriodTo", typeof(System.DateTime));
    
            var experienceIDParameter = experienceID.HasValue ?
                new ObjectParameter("ExperienceID", experienceID) :
                new ObjectParameter("ExperienceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExperienceInformation_sp", doctorIDParameter, companyNameParameter, positionParameter, periodFromParameter, periodToParameter, experienceIDParameter);
        }
    
        public virtual ObjectResult<BrowsePatients_sp_Result> BrowsePatients_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePatients_sp_Result>("BrowsePatients_sp");
        }
    
        public virtual ObjectResult<BrowsePatientsByID_sp_Result> BrowsePatientsByID_sp(Nullable<int> patientsID)
        {
            var patientsIDParameter = patientsID.HasValue ?
                new ObjectParameter("PatientsID", patientsID) :
                new ObjectParameter("PatientsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePatientsByID_sp_Result>("BrowsePatientsByID_sp", patientsIDParameter);
        }
    
        public virtual int DeletePatient_sp(Nullable<int> patientsID)
        {
            var patientsIDParameter = patientsID.HasValue ?
                new ObjectParameter("PatientsID", patientsID) :
                new ObjectParameter("PatientsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient_sp", patientsIDParameter);
        }
    
        public virtual int insertPatient_sp(string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string gender, string address, string country, string city, string province, string phone, Nullable<int> age, string postalCode, string description, string image, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPatient_sp", firstNameParameter, lastNameParameter, emailParameter, dOBParameter, genderParameter, addressParameter, countryParameter, cityParameter, provinceParameter, phoneParameter, ageParameter, postalCodeParameter, descriptionParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int UpdatePatient_sp(Nullable<int> patientsID, string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string gender, string address, string country, string city, string province, string phone, Nullable<int> age, string postalCode, string description, string image, string modifyBy, Nullable<System.DateTime> modifyDate, string status)
        {
            var patientsIDParameter = patientsID.HasValue ?
                new ObjectParameter("PatientsID", patientsID) :
                new ObjectParameter("PatientsID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient_sp", patientsIDParameter, firstNameParameter, lastNameParameter, emailParameter, dOBParameter, genderParameter, addressParameter, countryParameter, cityParameter, provinceParameter, phoneParameter, ageParameter, postalCodeParameter, descriptionParameter, imageParameter, modifyByParameter, modifyDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<BrowseAppointmentByID_sp_Result> BrowseAppointmentByID_sp(Nullable<int> appointmentID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAppointmentByID_sp_Result>("BrowseAppointmentByID_sp", appointmentIDParameter);
        }
    
        public virtual ObjectResult<BrowseDepartment_sp_Result> BrowseDepartment_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDepartment_sp_Result>("BrowseDepartment_sp");
        }
    
        public virtual ObjectResult<BrowseDepartmentsByID_sp_Result> BrowseDepartmentsByID_sp(Nullable<int> departmentsID)
        {
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDepartmentsByID_sp_Result>("BrowseDepartmentsByID_sp", departmentsIDParameter);
        }
    
        public virtual int DeleteAppointment_sp(Nullable<int> appointmentID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAppointment_sp", appointmentIDParameter);
        }
    
        public virtual int DeleteDepartement_sp(Nullable<int> departmentsID)
        {
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartement_sp", departmentsIDParameter);
        }
    
        public virtual int insertAppointment_sp(Nullable<int> patientsID, Nullable<int> departmentsID, Nullable<int> doctorID, Nullable<System.DateTime> dOB, Nullable<System.DateTime> time, Nullable<System.DateTime> endTime, string email, string phone, string description, string image, string createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> status)
        {
            var patientsIDParameter = patientsID.HasValue ?
                new ObjectParameter("PatientsID", patientsID) :
                new ObjectParameter("PatientsID", typeof(int));
    
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertAppointment_sp", patientsIDParameter, departmentsIDParameter, doctorIDParameter, dOBParameter, timeParameter, endTimeParameter, emailParameter, phoneParameter, descriptionParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int insertDepartment_sp(string departmentsName, string description, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var departmentsNameParameter = departmentsName != null ?
                new ObjectParameter("DepartmentsName", departmentsName) :
                new ObjectParameter("DepartmentsName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertDepartment_sp", departmentsNameParameter, descriptionParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int updateAppointment_sp(Nullable<int> patientsID, Nullable<int> departmentsID, Nullable<int> doctorID, Nullable<System.DateTime> dOB, Nullable<System.DateTime> time, Nullable<System.DateTime> endTime, string email, string phone, string description, string image, string createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> status, Nullable<int> appointmentID)
        {
            var patientsIDParameter = patientsID.HasValue ?
                new ObjectParameter("PatientsID", patientsID) :
                new ObjectParameter("PatientsID", typeof(int));
    
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAppointment_sp", patientsIDParameter, departmentsIDParameter, doctorIDParameter, dOBParameter, timeParameter, endTimeParameter, emailParameter, phoneParameter, descriptionParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter, appointmentIDParameter);
        }
    
        public virtual int UpdateDepartment_sp(Nullable<int> departmentsID, string departmentsName, string description, string modifyBy, Nullable<System.DateTime> modifyDate, string status)
        {
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            var departmentsNameParameter = departmentsName != null ?
                new ObjectParameter("DepartmentsName", departmentsName) :
                new ObjectParameter("DepartmentsName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment_sp", departmentsIDParameter, departmentsNameParameter, descriptionParameter, modifyByParameter, modifyDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<BrowseAppointment_sp_Result> BrowseAppointment_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAppointment_sp_Result>("BrowseAppointment_sp");
        }
    
        public virtual ObjectResult<BrowseEmployee_sp_Result> BrowseEmployee_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseEmployee_sp_Result>("BrowseEmployee_sp");
        }
    
        public virtual ObjectResult<BrowseEmployeeByID_sp_Result> BrowseEmployeeByID_sp(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseEmployeeByID_sp_Result>("BrowseEmployeeByID_sp", employeeIDParameter);
        }
    
        public virtual ObjectResult<BrowseRole_sp_Result> BrowseRole_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseRole_sp_Result>("BrowseRole_sp");
        }
    
        public virtual ObjectResult<BrowseRoleByID_sp_Result> BrowseRoleByID_sp(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseRoleByID_sp_Result>("BrowseRoleByID_sp", roleIDParameter);
        }
    
        public virtual int DeleteEmployee_sp(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee_sp", employeeIDParameter);
        }
    
        public virtual int DeleteRole_sp(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole_sp", roleIDParameter);
        }
    
        public virtual int insertEmployee_sp(Nullable<int> roleID, string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string phone, string image, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEmployee_sp", roleIDParameter, firstNameParameter, lastNameParameter, emailParameter, dOBParameter, phoneParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int insertRole_sp(string roleName, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertRole_sp", roleNameParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int UpdatEmployee_sp(Nullable<int> roleID, string firstName, string lastName, string email, Nullable<System.DateTime> dOB, string phone, string image, string createdBy, Nullable<System.DateTime> createdDate, string status, Nullable<int> employeeID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatEmployee_sp", roleIDParameter, firstNameParameter, lastNameParameter, emailParameter, dOBParameter, phoneParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter, employeeIDParameter);
        }
    
        public virtual int UpdateRole_sp(Nullable<int> roleID, string roleName, string modifyBy, Nullable<System.DateTime> modifyDate, string status)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRole_sp", roleIDParameter, roleNameParameter, modifyByParameter, modifyDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<BrowseDoctorExpBy_sp_Result> BrowseDoctorExpBy_sp(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDoctorExpBy_sp_Result>("BrowseDoctorExpBy_sp", doctorIDParameter);
        }
    
        public virtual int DeleteSchedule_sp(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchedule_sp", scheduleIDParameter);
        }
    
        public virtual int insertSchedule_sp(Nullable<int> departmentsID, Nullable<int> doctorID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string days, string image, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var daysParameter = days != null ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertSchedule_sp", departmentsIDParameter, doctorIDParameter, startTimeParameter, endTimeParameter, daysParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int UpdateSchedule_sp(Nullable<int> departmentsID, Nullable<int> doctorID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string days, string image, string createdBy, Nullable<System.DateTime> createdDate, string status, Nullable<int> scheduleID)
        {
            var departmentsIDParameter = departmentsID.HasValue ?
                new ObjectParameter("DepartmentsID", departmentsID) :
                new ObjectParameter("DepartmentsID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var daysParameter = days != null ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchedule_sp", departmentsIDParameter, doctorIDParameter, startTimeParameter, endTimeParameter, daysParameter, imageParameter, createdByParameter, createdDateParameter, statusParameter, scheduleIDParameter);
        }
    
        public virtual ObjectResult<BrowseSchedule_sp_Result> BrowseSchedule_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSchedule_sp_Result>("BrowseSchedule_sp");
        }
    
        public virtual ObjectResult<BrowseScheduleByID_sp_Result> BrowseScheduleByID_sp(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseScheduleByID_sp_Result>("BrowseScheduleByID_sp", scheduleIDParameter);
        }
    
        public virtual ObjectResult<BrowseLeave__sp_Result> BrowseLeave__sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseLeave__sp_Result>("BrowseLeave__sp");
        }
    
        public virtual ObjectResult<BrowseLeaveByID_sp_Result> BrowseLeaveByID_sp(Nullable<int> leaveID)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseLeaveByID_sp_Result>("BrowseLeaveByID_sp", leaveIDParameter);
        }
    
        public virtual int DeleteLeave_sp(Nullable<int> leaveID)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLeave_sp", leaveIDParameter);
        }
    
        public virtual int insertleave_sp(string employeeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string reason, string createdBy, Nullable<System.DateTime> createdDate, string status)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertleave_sp", employeeIDParameter, fromDateParameter, toDateParameter, reasonParameter, createdByParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int UpdateLeave_sp(string employeeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string reason, string modifyBy, Nullable<System.DateTime> modifyDate, string status, Nullable<int> leaveID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLeave_sp", employeeIDParameter, fromDateParameter, toDateParameter, reasonParameter, modifyByParameter, modifyDateParameter, statusParameter, leaveIDParameter);
        }
    }
}
